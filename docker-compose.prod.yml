version: '3.9'

services:
  # Redis for caching and rate limiting
  redis:
    image: redis:7-alpine
    container_name: digital_twin_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # TimescaleDB for time-series data
  db:
    image: timescale/timescaledb:latest-pg14
    container_name: digital_twin_db
    environment:
      POSTGRES_USER: energy
      POSTGRES_PASSWORD: energy
      POSTGRES_DB: energydb
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "5432:5432"
    volumes:
      - db_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U energy -d energydb"]
      interval: 10s
      timeout: 5s
      retries: 5
    command: >
      postgres
      -c shared_preload_libraries=timescaledb
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100

  # MQTT Broker
  mqtt:
    image: eclipse-mosquitto:2
    container_name: digital_twin_mqtt
    ports:
      - "1883:1883"
      - "9001:9001"
    volumes:
      - ./mqtt_broker/config:/mosquitto/config
      - mqtt_data:/mosquitto/data
      - mqtt_logs:/mosquitto/log
    healthcheck:
      test: ["CMD", "mosquitto_pub", "-h", "localhost", "-t", "test", "-m", "test"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API
  backend:
    build:
      context: ./backend_ai
      dockerfile: Dockerfile.prod
    container_name: digital_twin_backend
    environment:
      - DATABASE_URL=postgresql://energy:energy@db:5432/energydb
      - REDIS_URL=redis://redis:6379/0
      - MQTT_BROKER=mosquitto://mqtt:1883
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-change-in-production}
      - LOG_LEVEL=INFO
      - WORKERS=4
    ports:
      - "8000:8000"
    volumes:
      - ./artifacts:/app/artifacts
      - ./logs:/app/logs
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      mqtt:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '2.0'
        reservations:
          memory: 1G
          cpus: '1.0'

  # Celery Worker for background tasks
  celery_worker:
    build:
      context: ./backend_ai
      dockerfile: Dockerfile.prod
    container_name: digital_twin_celery
    command: celery -A main.celery worker --loglevel=info --concurrency=2
    environment:
      - DATABASE_URL=postgresql://energy:energy@db:5432/energydb
      - REDIS_URL=redis://redis:6379/0
      - MQTT_BROKER=mosquitto://mqtt:1883
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-change-in-production}
    volumes:
      - ./artifacts:/app/artifacts
      - ./logs:/app/logs
    depends_on:
      - db
      - redis
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'

  # Celery Beat for scheduled tasks
  celery_beat:
    build:
      context: ./backend_ai
      dockerfile: Dockerfile.prod
    container_name: digital_twin_celery_beat
    command: celery -A main.celery beat --loglevel=info
    environment:
      - DATABASE_URL=postgresql://energy:energy@db:5432/energydb
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-change-in-production}
    volumes:
      - ./artifacts:/app/artifacts
      - ./logs:/app/logs
    depends_on:
      - db
      - redis
    restart: unless-stopped

  # Prometheus for metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: digital_twin_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: digital_twin_grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    restart: unless-stopped

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: digital_twin_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - backend
    restart: unless-stopped

volumes:
  db_data:
  redis_data:
  mqtt_data:
  mqtt_logs:
  prometheus_data:
  grafana_data: